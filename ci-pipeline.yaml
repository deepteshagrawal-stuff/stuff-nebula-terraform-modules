name: stuff-nebula-terraform-modules

trigger:
  batch: true
  branches:
    include:
    - '*'
  paths:
    exclude:
    - 'README.md'

pr:
  branches:
    include:
      - '*'
  drafts: false

pool:
  vmImage: ubuntu-latest

jobs:
  - job: Build
    displayName: Build
    steps:
    - checkout: self
      persistCredentials: true
      displayName: 'Checkout'

    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: 'latest'

    - task: AzureCLI@2
      displayName: 'Azure CLI - Get AWS credentials'
      inputs:
        azureSubscription: 'SHARED-SERVICES-nebula-base-TerraformServiceAccount'  # Replace with your Azure service connection name
        scriptType: 'bash'
        scriptLocation: 'inline'
        inlineScript: |
          # Use Azure CLI to get credentials
          aws_access_key_id=$(az account get-access-token --resource https://management.core.windows.net/ --query accessToken -o tsv)
          aws_secret_access_key=$(az account get-access-token --resource https://management.core.windows.net/ --query refreshToken -o tsv)

          echo "key id: $aws_access_key_id"
          echo "secret access key: $aws_secret_access_key"

          # Set AWS credentials as environment variables
          export AWS_ACCESS_KEY_ID="$aws_access_key_id"
          export AWS_SECRET_ACCESS_KEY="$aws_secret_access_key"

          for module in ./modules/*; do
            echo "Initialising & Validating module: $module"
            terraform -chdir=$module init -backend=false
            terraform -chdir=$module validate
          done

    - bash: |
        set -e
        echo "Using Azure service connection: $AZURE_SERVICE_CONNECTION_NAME"
        for module in ./modules/*; do
            echo "Initialising & Validating module: $module"
            terraform -chdir=$module init -backend=false
            terraform -chdir=$module validate
        done
      displayName: Validate all Terraform modules
      env:
        AZURE_SERVICE_CONNECTION_NAME: 'SHARED-SERVICES-nebula-base-TerraformServiceAccount'

    - task: TerraformTaskV3@3
      displayName: Init Terraform
      inputs:
        provider: 'aws'
        command: 'init'
        backendServiceAWS: 'SHARED-SERVICES-nebula-base-TerraformServiceAccount'
        backendAWSBucketName: 'stuff-terraform-nebula'
        backendAWSKey: 'shared/stuff-nebula-terraform-modules-state.tfstate'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    - task: TerraformTaskV3@3
      displayName: Plan Terraform
      inputs:
        provider: 'aws'
        command: 'plan'
        commandOptions: '-out=plan'
        environmentServiceNameAWS: 'SHARED-SERVICES-nebula-base-TerraformServiceAccount'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    - task: TerraformTaskV3@3
      displayName: Apply Terraform
      inputs:
        provider: 'aws'
        command: 'apply'
        commandOptions: '-input=false plan'
        environmentServiceNameAWS: 'SHARED-SERVICES-nebula-base-TerraformServiceAccount'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    - task: PythonScript@0
      displayName: Check Version Status and Prepare Modules - Python Script
      inputs:
        scriptSource: 'filePath'
        scriptPath: './prepare_modules.py'
        failOnStderr: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    - task: AWSShellScript@1
      displayName: Upload New Modules
      inputs:
        awsCredentials: 'nebula-base-terraform-modules-sa'
        regionName: 'ap-southeast-2'
        scriptType: 'filePath'
        filePath: './upload_to_s3.sh'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

    - bash: |
        BRANCH_NAME=$(echo "$(Build.SourceBranch)" | sed 's/refs\/heads\///g')
        echo ${BRANCH_NAME}
        git config --global user.name "stuff-nebula-terraform-modules-service-ci-pipeline"
        git checkout ${BRANCH_NAME}
        git add ./modules/*/version-history.json
        git commit -m "$(Build.SourceVersion) Updating Version Files [skip ci]"
        git push origin ${BRANCH_NAME}
      displayName: 'Push Updated Version Files'
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
